package controllers;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import com.fasterxml.jackson.databind.JsonNode;

import models.Person;
import play.libs.Json;
import play.mvc.Controller;
import play.mvc.Result;
import services.serviceimpl.ServicesFactory;

/**
 * The main set of web services.
 */
@Named
public class Application extends Controller {

    //private final PersonRepository personRepository;

    // We are using constructor injection to receive a repository to support our desire for immutability.
   /* @Inject
    public Application(final PersonRepository personRepository, final ServicesFactory servicesFactory) {
        this.personRepository = personRepository;
        this.servicesFactory = servicesFactory;
    }*/
    
	@Inject
    ServicesFactory servicesFactory;

    public Result index() {

        // For fun we save a new person and then find that one we've just saved. The id is auto generated by
        // the db so we know that we're round-tripping to the db and back in order to demonstrate something
        // interesting. Spring Data takes care of transactional concerns and the following code is all
        // executed on the same thread (a requirement of the JPA entity manager).

        final Person person = new Person();
        person.firstname = "Bruce";
        person.surname = "Smith";

        /*final Person savedPerson = personRepository.save(person);

        final Person retrievedPerson = personRepository.findOne(savedPerson.id);*/
        
        final Person savedPerson = servicesFactory.personService.savePerson(person);

        final Person retrievedPerson = servicesFactory.personService.findOnePerson(savedPerson.id);

        // Deliver the index page with a message showing the id that was generated.

        return ok(views.html.index.render("Found id: " + retrievedPerson.id + " of person/people Addeed text"));
    }
    
    
    public Result persons() {
    	List<Person> persons = servicesFactory.personService.persons();
    	JsonNode jsonNode = Json.toJson(persons);
    	return ok(jsonNode);
    }
}